"use strict";

exports.__esModule = true;
exports.save = save;
exports.load = load;
exports.get = get;

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _fs = require("fs");

var _fs2 = _interopRequireDefault(_fs);

var _mkdirp = require("mkdirp");

var _homeOrTmp = require("home-or-tmp");

var _homeOrTmp2 = _interopRequireDefault(_homeOrTmp);

var _babelCore = require("babel-core");

var babel = _interopRequireWildcard(_babelCore);

var _findCacheDir = require("find-cache-dir");

var _findCacheDir2 = _interopRequireDefault(_findCacheDir);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DEFAULT_CACHE_DIR = (0, _findCacheDir2.default)({
  name: "babel-register"
}) || _homeOrTmp2.default;

var DEFAULT_FILENAME = _path2.default.join(DEFAULT_CACHE_DIR, ".babel." + babel.version + "." + babel.getEnv() + ".json");

var FILENAME = process.env.BABEL_CACHE_PATH || DEFAULT_FILENAME;
var data = {};

function save() {
  var serialised = "{}";

  try {
    serialised = JSON.stringify(data, null, "  ");
  } catch (err) {
    if (err.message === "Invalid string length") {
      err.message = "Cache too large so it's been cleared.";
      console.error(err.stack);
    } else {
      throw err;
    }
  }

  (0, _mkdirp.sync)(_path2.default.dirname(FILENAME));

  _fs2.default.writeFileSync(FILENAME, serialised);
}

function load() {
  if (process.env.BABEL_DISABLE_CACHE) return;
  process.on("exit", save);
  process.nextTick(save);
  if (!_fs2.default.existsSync(FILENAME)) return;

  try {
    data = JSON.parse(_fs2.default.readFileSync(FILENAME));
  } catch (err) {
    return;
  }
}

function get() {
  return data;
}