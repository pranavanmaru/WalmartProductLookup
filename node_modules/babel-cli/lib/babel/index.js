#!/usr/bin/env node
"use strict";

var _fs = require("fs");

var _fs2 = _interopRequireDefault(_fs);

var _commander = require("commander");

var _commander2 = _interopRequireDefault(_commander);

var _babelCore = require("babel-core");

var _uniq = require("lodash/uniq");

var _uniq2 = _interopRequireDefault(_uniq);

var _glob = require("glob");

var _glob2 = _interopRequireDefault(_glob);

var _dir = require("./dir");

var _dir2 = _interopRequireDefault(_dir);

var _file = require("./file");

var _file2 = _interopRequireDefault(_file);

var _package = require("../../package.json");

var _package2 = _interopRequireDefault(_package);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function booleanify(val) {
  if (val === "true" || val == 1) {
    return true;
  }

  if (val === "false" || val == 0 || !val) {
    return false;
  }

  return val;
}

function collect(value, previousValue) {
  if (typeof value !== "string") return previousValue;
  var values = value.split(",");
  return previousValue ? previousValue.concat(values) : values;
}

_commander2.default.option("-f, --filename [filename]", "filename to use when reading from stdin - this will be used in source-maps, errors etc");

_commander2.default.option("--presets [list]", "comma-separated list of preset names", collect);

_commander2.default.option("--plugins [list]", "comma-separated list of plugin names", collect);

_commander2.default.option("--source-type [script|module]", "");

_commander2.default.option("--no-babelrc", "Whether or not to look up .babelrc and .babelignore files");

_commander2.default.option("--ignore [list]", "list of glob paths to **not** compile", collect);

_commander2.default.option("--only [list]", "list of glob paths to **only** compile", collect);

_commander2.default.option("--no-highlight-code", "enable/disable ANSI syntax highlighting of code frames (on by default)");

_commander2.default.option("--no-comments", "write comments to generated output (true by default)");

_commander2.default.option("--retain-lines", "retain line numbers - will result in really ugly code");

_commander2.default.option("--compact [true|false|auto]", "do not include superfluous whitespace characters and line terminators", booleanify);

_commander2.default.option("--minified", "save as much bytes when printing [true|false]");

_commander2.default.option("--auxiliary-comment-before [string]", "print a comment before any injected non-user code");

_commander2.default.option("--auxiliary-comment-after [string]", "print a comment after any injected non-user code");

_commander2.default.option("-s, --source-maps [true|false|inline|both]", "", booleanify);

_commander2.default.option("--source-map-target [string]", "set `file` on returned source map");

_commander2.default.option("--source-file-name [string]", "set `sources[0]` on returned source map");

_commander2.default.option("--source-root [filename]", "the root from which all sources are relative");

_commander2.default.option("--module-root [filename]", "optional prefix for the AMD module formatter that will be prepend to the filename on module definitions");

_commander2.default.option("-M, --module-ids", "insert an explicit id for modules");

_commander2.default.option("--module-id [string]", "specify a custom name for module ids");

_commander2.default.option("-x, --extensions [extensions]", "List of extensions to compile when a directory has been input [.es6,.js,.es,.jsx,.mjs]", collect);

_commander2.default.option("-w, --watch", "Recompile files on changes");

_commander2.default.option("--skip-initial-build", "Do not compile files before watching");

_commander2.default.option("-o, --out-file [out]", "Compile all input files into a single file");

_commander2.default.option("-d, --out-dir [out]", "Compile an input directory of modules into an output directory");

_commander2.default.option("-D, --copy-files", "When compiling a directory copy over non-compilable files");

_commander2.default.option("-q, --quiet", "Don't log anything");

_commander2.default.version(_package2.default.version + " (babel-core " + _babelCore.version + ")");

_commander2.default.usage("[options] <files ...>");

_commander2.default.parse(process.argv);

var errors = [];

var filenames = _commander2.default.args.reduce(function (globbed, input) {
  var files = _glob2.default.sync(input);

  if (!files.length) files = [input];
  return globbed.concat(files);
}, []);

filenames = (0, _uniq2.default)(filenames);
filenames.forEach(function (filename) {
  if (!_fs2.default.existsSync(filename)) {
    errors.push(filename + " doesn't exist");
  }
});

if (_commander2.default.outDir && !filenames.length) {
  errors.push("filenames required for --out-dir");
}

if (_commander2.default.outFile && _commander2.default.outDir) {
  errors.push("cannot have --out-file and --out-dir");
}

if (_commander2.default.watch) {
  if (!_commander2.default.outFile && !_commander2.default.outDir) {
    errors.push("--watch requires --out-file or --out-dir");
  }

  if (!filenames.length) {
    errors.push("--watch requires filenames");
  }
}

if (_commander2.default.skipInitialBuild && !_commander2.default.watch) {
  errors.push("--skip-initial-build requires --watch");
}

if (errors.length) {
  console.error(errors.join(". "));
  process.exit(2);
}

var opts = _commander2.default.opts();

delete opts.version;
delete opts.extensions;
delete opts.watch;
delete opts.skipInitialBuild;
delete opts.outFile;
delete opts.outDir;
delete opts.copyFiles;
delete opts.quiet;
if (opts.babelrc === true) opts.babelrc = undefined;
if (opts.comments === true) opts.comments = undefined;
if (opts.highlightCode === true) opts.highlightCode = undefined;
var fn = _commander2.default.outDir ? _dir2.default : _file2.default;
fn(_commander2.default, filenames, opts);