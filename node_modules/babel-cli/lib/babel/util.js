"use strict";

exports.__esModule = true;
exports.readdir = undefined;
exports.chmod = chmod;
exports.readdirFilter = readdirFilter;
exports.isCompilableExtension = isCompilableExtension;
exports.addSourceMappingUrl = addSourceMappingUrl;
exports.log = log;
exports.transform = transform;
exports.compile = compile;
exports.requireChokidar = requireChokidar;

var _commander = require("commander");

var _commander2 = _interopRequireDefault(_commander);

var _fsReaddirRecursive = require("fs-readdir-recursive");

var _fsReaddirRecursive2 = _interopRequireDefault(_fsReaddirRecursive);

var _babelCore = require("babel-core");

var babel = _interopRequireWildcard(_babelCore);

var _includes = require("lodash/includes");

var _includes2 = _interopRequireDefault(_includes);

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _fs = require("fs");

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function chmod(src, dest) {
  _fs2.default.chmodSync(dest, _fs2.default.statSync(src).mode);
}

function readdirFilter(filename) {
  return (0, _fsReaddirRecursive2.default)(filename).filter(function (filename) {
    return isCompilableExtension(filename);
  });
}

exports.readdir = _fsReaddirRecursive2.default;

function isCompilableExtension(filename, altExts) {
  var exts = altExts || babel.DEFAULT_EXTENSIONS;

  var ext = _path2.default.extname(filename);

  return (0, _includes2.default)(exts, ext);
}

function addSourceMappingUrl(code, loc) {
  return code + "\n//# sourceMappingURL=" + _path2.default.basename(loc);
}

function log(msg) {
  if (!_commander2.default.quiet) console.log(msg);
}

function transform(filename, code, opts) {
  opts = Object.assign({}, opts, {
    filename: filename
  });
  return babel.transform(code, opts);
}

function compile(filename, opts) {
  try {
    return babel.transformFileSync(filename, opts);
  } catch (err) {
    if (_commander2.default.watch) {
      console.error(toErrorStack(err));
      return {
        ignored: true
      };
    } else {
      throw err;
    }
  }
}

function toErrorStack(err) {
  if (err._babel && err instanceof SyntaxError) {
    return err.name + ": " + err.message + "\n" + err.codeFrame;
  } else {
    return err.stack;
  }
}

process.on("uncaughtException", function (err) {
  console.error(toErrorStack(err));
  process.exit(1);
});

function requireChokidar() {
  try {
    return require("chokidar");
  } catch (err) {
    console.error("The optional dependency chokidar failed to install and is required for " + "--watch. Chokidar is likely not supported on your platform.");
    throw err;
  }
}